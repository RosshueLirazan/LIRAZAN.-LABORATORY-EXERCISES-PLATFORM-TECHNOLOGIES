#include <iostream> //LIRAZAN LABORTATORY 7
#include <vector>
#include <iomanip>
#include <climits>

using namespace std;

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int completionTime;
    int waitingTime;
    int turnaroundTime;
};

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    vector<Process> processes(n);

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        cout << "Enter arrival time for process " << i + 1 << ": ";
        cin >> processes[i].arrivalTime;
        cout << "Enter burst time for process " << i + 1 << ": ";
        cin >> processes[i].burstTime;
        processes[i].remainingTime = processes[i].burstTime;
    }

    int currentTime = 0;
    int completedProcesses = 0;
    double totalWaitingTime = 0;
    double totalTurnaroundTime = 0;

    while (completedProcesses < n) {
        int shortest = -1;
        int minRemainingTime = INT_MAX;

        // Find the process with the shortest remaining time that has arrived
        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && 
                processes[i].remainingTime > 0 && 
                processes[i].remainingTime < minRemainingTime) {
                minRemainingTime = processes[i].remainingTime;
                shortest = i;
            }
        }

        if (shortest == -1) {
            // No process is ready, move time forward
            currentTime++;
            continue;
        }

        // Process the selected process for one unit of time
        processes[shortest].remainingTime--;
        currentTime++;

        // If the process is completed
        if (processes[shortest].remainingTime == 0) {
            processes[shortest].completionTime = currentTime;
            processes[shortest].turnaroundTime = processes[shortest].completionTime - processes[shortest].arrivalTime;
            processes[shortest].waitingTime = processes[shortest].turnaroundTime - processes[shortest].burstTime;

            totalWaitingTime += processes[shortest].waitingTime;
            totalTurnaroundTime += processes[shortest].turnaroundTime;

            completedProcesses++;
