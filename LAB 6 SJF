#include <iostream> \\LIRAZAN (LAB 6 SJF)
#include <vector>
#include <algorithm>
using namespace std;




// Structure of the process
struct Process {
    int id;          // Process ID
    int arrivalTime; // Arrival time of the process
    int burstTime;   // Burst time of the process
    int waitingTime; // Waiting time of the process
    int turnaroundTime; // Turnaround time of the process
};





// Function to sort processes by burst time
bool compareBurstTime(Process a, Process b) {
    return a.burstTime < b.burstTime;
}






void calculateTimes(vector<Process>& processes) {
    int n = processes.size();
    int totalWaitingTime = 0;
    int totalTurnaroundTime = 0;
    
    
    
    

    // Calculation of waiting time and turnaround time
    for (int i = 0; i < n; i++) {
        if (i == 0) {
            processes[i].waitingTime = 0;
        } else {
            processes[i].waitingTime = processes[i - 1].waitingTime + processes[i - 1].burstTime;
        }
        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
        totalWaitingTime += processes[i].waitingTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
    }





    // Displaying of the process information
    cout << "Process\tBurst Time\tWaiting Time\tTurnaround Time\n";
    for (int i = 0; i < n; i++) {
        cout << "P" << processes[i].id << "\t" 
             << processes[i].burstTime << "\t\t" 
             << processes[i].waitingTime << "\t\t" 
             << processes[i].turnaroundTime << endl;
    }





    // Calculating the average times
    float avgWaitingTime = (float)totalWaitingTime / n;
    float avgTurnaroundTime = (float)totalTurnaroundTime / n;
    cout << "Average Waiting Time: " << avgWaitingTime << endl;
    cout << "Average Turnaround Time: " << avgTurnaroundTime << endl;
}





int main() {
    int n;
    cout << "Enter number of processes: ";
    cin >> n;

    vector<Process> processes(n);
    
    
    
    

    // Input users burst time for each process
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        cout << "Enter burst time for process " << i + 1 << ": ";
        cin >> processes[i].burstTime;
        processes[i].arrivalTime = 0; // Assuming all processes arrive at the same time for simplicity
    }

    // Sort processes by burst time
    sort(processes.begin(), processes.end(), compareBurstTime);

    // Calculate waiting time and turnaround time
    calculateTimes(processes);

    return 0;
}
